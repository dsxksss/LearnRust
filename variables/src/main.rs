/*基本类型
int(i8,i16,i32<默认>,i64,i128):整数类型,包括负数
+int(u8,u16,u32<默认>,u64,u128):正整数类型,因为不包含负数,所以可以包含更多正整数
float(f32<默认>,f64):浮点类型,数字越大精度越高,因此小数点位数也要多
bool
*/
fn rust_type1() {
    //在rust语言里，每个变量内容默认都是不可变的
    //必须使用mut关键字表示此变量内容可被改变
    //变量的创建语法 <let> <mut可选> <变量名>:<变量类型 可忽略,因为会自动推导> = <变量值>
    let a = 12;
    // a=13;xxx
    let mut b = 0; //这里的as表示强制转换成了i32类型的变量
    println!("b原来的值{}", b);
    b = 30 as i64;
    //就算加了mut关键字也不能改变它的根类型只允许改变相同类型的值
    // b="abc";xxx
    let c: bool = true;
    println!("a={},b={},c={}", a, b, c);
    println!("你好");
}

//特殊类型(元组,结构,数组,内存)
fn rust_type2() {
    //元组的定义语法 <let> <mut可选> <元组名>:<(元组元素的类型 可忽略)> = <(元组值)>
    //元组限制再次增加或减少个数,但是允许改变原有内容(需加mut关键字)
    let _yz: (i32, f64, bool) = (28, 1.64, true);
}

fn main() {
    rust_type1();
    rust_type2();
}
